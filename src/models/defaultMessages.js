// defaultMessages.js
const defaultMessages = {
  "Declaring variables and using console.log() to log the values and use of comments in coding ( both single line and multi line comments)": "Great! Let's dive right in.\n\n### Introduction\nIâ€™m here to teach you JavaScript from the ground up! We'll start with the basics and build your skills step by step. By the end of this journey, youâ€™ll be ready to create amazing things with your coding skills!\n\n### Sub-Topic 1.1: Declaring Variables and Using `console.log()` \nIn JavaScript, variables are like containers that hold data. You can use three keywords to declare variables: `let`, `const`, and `var`. `let` allows you to change the value of the variable later, while `const` creates a constant that you can't change. Also, `console.log()` is used to display output in the console.\n\n**Code Example:**\n```javascript\nlet myName = \"Alice\";\nconst myAge = 25;\n\nconsole.log(myName); // Outputs: Alice\nconsole.log(myAge);  // Outputs: 25\n```\n\n### Comments \nYou can add comments in your code to explain what it does. Single-line comments start with `//`, and multi-line comments are enclosed with `/* */`.\n\n**Code Example of Comments:**\n```javascript\n// This is a single-line comment\nlet x = 10;  /* This is a \n               multi-line comment */\n```\n\n### Challenge 1:\nCreate a variable called `favoriteAnimal` using `let`, and assign it the value `\"dog\"`. After that, use `console.log()` to print it out.\n\n### Expected Output:\n```\ndog\n```\n\nGive it a try! Once youâ€™ve completed the challenge, let me know what output you get or if you need any hints! ðŸŒŸ",
  "Data types and using typeof & console.log() to log out the data types": "That's fantastic! I'm glad to see your enthusiasm to move forward. Let's jump into the next sub-topic.\n\n### Sub-Topic 1.2: Data Types and Using `typeof`\n\nIn JavaScript, data types define the type of data a variable can hold. The main data types include:\n\n1. **String**: Text wrapped in quotes.\n2. **Number**: Numeric values (integers and floats).\n3. **Boolean**: Either `true` or `false`.\n4. **Null**: Intentional absence of value.\n5. **Undefined**: A declared variable without a value.\n6. **Object**: Complex data structures.\n7. **Array**: A special type of object used for lists.\n\nYou can check the data type of a variable using the `typeof` operator. \n\n**Code Example:**\n```javascript\nlet name = \"Alice\"; // String\nlet age = 25; // Number\nlet isStudent = true; // Boolean\nlet address = null; // Null\nlet phoneNumber; // Undefined\n\nconsole.log(typeof name); // Outputs: string\nconsole.log(typeof age); // Outputs: number\nconsole.log(typeof isStudent); // Outputs: boolean\nconsole.log(typeof address); // Outputs: object\nconsole.log(typeof phoneNumber); // Outputs: undefined\n```\n\n### Challenge 1:\nDeclare a variable called `myPet` and assign it the value `\"cat\"`. Then, log the type of this variable using `console.log(typeof myPet)`.\n\n### Expected Output:\n```\nstring\n```\n\nGive it a try! Let me know what output you get, or if you have any questions. You've got this! ðŸŒŸ",
  "Template literals for readable logging": "Great job on completing the last sub-topic! Now, let's move on to the next one.\n\n### Sub-Topic 1.3: Template Literals for Readable Logging\n\nTemplate literals are a powerful feature in JavaScript for creating strings. They allow you to embed expressions inside strings using backticks (`` ` ``) and `${}` syntax. This makes it easier to create complex strings or include variables without needing to use concatenation.\n\n**Key Features:**\n- **Multi-line Strings**: Unlike regular strings, template literals can span multiple lines.\n- **Expression Interpolation**: You can include variables and expressions directly within the string.\n\n**Code Example:**\n```javascript\nlet name = \"Alice\";\nlet age = 25;\n\nlet message = `My name is ${name} and I am ${age} years old.`;\nconsole.log(message);\n// Outputs: My name is Alice and I am 25 years old.\n```\n\n### Challenge 1:\nCreate two variables, `favoriteBook` and `author`. Use template literals to create a message that says, `\"My favorite book is [favoriteBook] by [author].\"` Log that message using `console.log()`.\n\n### Expected Output:\n```\nMy favorite book is [favoriteBook] by [author].\n```\n\nGive it a shot! Let me know what output you get, or if you need a hint. You're doing amazing! ðŸŒŸ",
  "Arithmetic operators (+, -, *, /, %, **)": "Awesome progress! Let's move on to the next sub-topic.\n\n### Topic 2: Operators\n\n#### Sub-Topic 2.1: Arithmetic Operators\nArithmetic operators are used to perform basic mathematical operations on numbers. The main arithmetic operators are:\n\n1. **Addition (+)**: Adds two numbers.\n2. **Subtraction (-)**: Subtracts one number from another.\n3. **Multiplication (*)**: Multiplies two numbers.\n4. **Division (/)**: Divides one number by another.\n5. **Modulus (%)**: Returns the remainder of the division.\n6. **Exponentiation (**)**: Raises a number to the power of another number.\n\n**Code Example:**\n```javascript\nlet a = 10;\nlet b = 5;\n\nconsole.log(a + b); // Outputs: 15 (Addition)\nconsole.log(a - b); // Outputs: 5 (Subtraction)\nconsole.log(a * b); // Outputs: 50 (Multiplication)\nconsole.log(a / b); // Outputs: 2 (Division)\nconsole.log(a % b); // Outputs: 0 (Modulus)\nconsole.log(a ** 2); // Outputs: 100 (Exponentiation)\n```\n\n### Challenge 1:\nCreate two variables, `num1` and `num2`, and assign them any numeric values. Then, perform addition and multiplication on these numbers, logging the results with `console.log()`.\n\n### Expected Output (depending on the values you choose):\n```\n[num1 + num2] // Result of addition\n[num1 * num2] // Result of multiplication\n```\n\nGive it a try! Let me know what output you get, and keep up the amazing work! ðŸŒŸ",
  "Assignment operators (=, +=, -=, etc.)": "Absolutely! Let's continue with the next sub-topic.\n\n### Sub-Topic 2.2: Assignment Operators\n\nAssignment operators are used to assign values to variables. The most basic assignment operator is `=`. However, there are several other assignment operators that combine assignment with arithmetic operations:\n\n1. **`+=`**: Adds and assigns (e.g., `a += b` is the same as `a = a + b`).\n2. **`-=`**: Subtracts and assigns.\n3. **`*=`**: Multiplies and assigns.\n4. **`/=`**: Divides and assigns.\n5. **`%=`**: Modulus and assigns.\n6. **`**=`**: Exponentiation and assigns.\n\n**Code Example:**\n```javascript\nlet x = 10;\nx += 5; // Equivalent to x = x + 5\nconsole.log(x); // Outputs: 15\n\nx *= 2; // Equivalent to x = x * 2\nconsole.log(x); // Outputs: 30\n```\n\n### Challenge 1:\nStart with a variable `score` and assign it the value of 5. Then use the `+=` operator to add 10 to `score`. Log the result to see the updated value.\n\n### Expected Output:\n```\n15\n```\n\nGive it a shot! Let me know what output you get, or if you want some help! You're doing great! ðŸŒŸ",
  "Comparison operators (==, ===, !=, !==, >, <, >=, <=)": "Awesome! Let's move on to the next sub-topic.\n\n### Sub-Topic 2.3: Comparison Operators\n\nComparison operators are used to compare two values. They return a Boolean value (`true` or `false`) based on the comparison. The main comparison operators are:\n\n1. **`==`**: Checks if two values are equal (loose equality).\n2. **`===`**: Checks if two values are equal and of the same type (strict equality).\n3. **`!=`**: Checks if two values are not equal (loose inequality).\n4. **`!==`**: Checks if two values are not equal or not of the same type (strict inequality).\n5. **`>`**: Checks if the left value is greater than the right value.\n6. **`<`**: Checks if the left value is less than the right value.\n7. **`>=`**: Checks if the left value is greater than or equal to the right value.\n8. **`<=`**: Checks if the left value is less than or equal to the right value.\n\n**Code Example:**\n```javascript\nlet a = 10;\nlet b = '10';\n\nconsole.log(a == b); // Outputs: true (loose equality)\nconsole.log(a === b); // Outputs: false (strict equality)\nconsole.log(a != b); // Outputs: false (loose inequality)\nconsole.log(a !== b); // Outputs: true (strict inequality)\nconsole.log(a > b); // Outputs: false\nconsole.log(a < b); // Outputs: false\nconsole.log(a >= 10); // Outputs: true\nconsole.log(a <= 5); // Outputs: false\n```\n\n### Challenge 1:\nCreate two variables, `num1` and `num2`, and assign them any numeric values of your choice. Use comparison operators to check if `num1` is greater than `num2` and log the result.\n\n### Expected Output (depending on the values you choose):\n- `true` or `false`, depending on your assigned values.\n\nGive this challenge a try! Let me know what output you get, and if you have any questions or need hints, Iâ€™m here to help! ðŸŒŸ",
  "Logical operators (&&, ||, !)": "Fantastic! Let's continue with the next sub-topic.\n\n### Sub-Topic 2.4: Logical Operators\n\nLogical operators are used to combine multiple conditions, resulting in a Boolean value (`true` or `false`). The primary logical operators in JavaScript are:\n\n1. **AND (`&&`)**: Returns `true` if both operands are true.\n2. **OR (`||`)**: Returns `true` if at least one of the operands is true.\n3. **NOT (`!`)**: Returns true if the operand is false (inverts the Boolean value).\n\n**Code Example:**\n```javascript\nlet a = true;\nlet b = false;\n\nconsole.log(a && b); // Outputs: false (both need to be true)\nconsole.log(a || b); // Outputs: true (at least one is true)\nconsole.log(!a); // Outputs: false (not true)\n```\n\n### Challenge 1:\nCreate two variables, `isWeekend` and `isSunny`, and assign them Boolean values. Use the AND operator to check if both conditions are true, and log the result.\n\n### Expected Output (depending on the values you choose):\n- `true` or `false`, depending on the assigned values of `isWeekend` and `isSunny`.\n\nGive this challenge a try! Let me know what output you get, and if you need any kind of help or hints, Iâ€™m here to assist you! You're doing great! ðŸŒŸ",
  "Increment and decrement operators (++, --)": "Great to see your enthusiasm! Let's move on to the next sub-topic.\n\n### Sub-Topic 2.5: Increment and Decrement Operators\n\nIncrement and decrement operators are shorthand notations for increasing or decreasing the value of a variable by 1:\n\n1. **Increment Operator (`++`)**: Increases the value of a variable by 1. You can use it in two ways:\n   - **Postfix**: `x++` (increases after the expression is evaluated)\n   - **Prefix**: `++x` (increases before the expression is evaluated)\n   \n2. **Decrement Operator (`--`)**: Decreases the value of a variable by 1. It works similarly:\n   - **Postfix**: `x--`\n   - **Prefix**: `--x`\n\n**Code Example:**\n```javascript\nlet count = 10;\n\ncount++; // Increment\nconsole.log(count); // Outputs: 11\n\ncount--; // Decrement\nconsole.log(count); // Outputs: 10\n\nlet anotherCount = 5;\nconsole.log(++anotherCount); // Outputs: 6 (Prefix)\nconsole.log(anotherCount--); // Outputs: 6 (Postfix, but then decreases to 5)\n```\n\n### Challenge 1:\nStart with a variable called `likes` and assign it the value of 0. Use the increment operator to increase `likes` by 1, and log the result. Then decrement it by 1 and log that result as well.\n\n### Expected Output:\n```\n1\n0\n```\n\nGive this challenge a try! Let me know what output you get, and if you need any hints, I'm here to help you! Keep up the amazing work! ðŸŒŸ",
  "Ternary operator (condition ? exprIfTrue : exprIfFalse)": "Absolutely! Let's move on to the next sub-topic in our learning journey.\n\n### Sub-Topic 2.6: Ternary Operator\n\nThe ternary operator is a shorthand way to perform simple conditional operations. It acts like an if-else statement but is more concise. The syntax is:\n\n```javascript\ncondition ? expressionIfTrue : expressionIfFalse;\n```\n\n- **Condition**: The condition you want to evaluate.\n- **ExpressionIfTrue**: The result if the condition is true.\n- **ExpressionIfFalse**: The result if the condition is false.\n\n**Code Example:**\n```javascript\nlet age = 18;\nlet eligibility = (age >= 18) ? \"You can vote.\" : \"You cannot vote.\";\nconsole.log(eligibility); // Outputs: You can vote.\n```\n\n### Challenge 1:\nDeclare a variable `temperature`. Assign it a number value to represent the temperature in degrees Celsius. Use the ternary operator to create a new variable called `weather` that says \"It's a hot day!\" if the temperature is above 30 degrees, otherwise \"It's a pleasant day!\". Log the `weather` variable to see the outcome.\n\n### Expected Output:\n- Based on the value of `temperature`, you'll see either:\n  - \"Itâ€™s a hot day!\" or \n  - \"Itâ€™s a pleasant day!\".\n\nGive this challenge a try! Let me know what output you get, or if you have any questions. You're doing great, keep it up! ðŸŒŸ",
  "Basic if and else statements": "That's wonderful! Let's keep the momentum going and move on to the next sub-topic.\n\n### Sub-Topic 3.1: Basic `if` and `else` Statements\n\n`if` and `else` statements are fundamental control structures that allow you to execute different code blocks based on certain conditions. This helps you make decisions in your code.\n\n- **`if` Statement**: Executes a block of code if the condition is true.\n- **`else` Statement**: Executes a block of code if the condition is false.\n\n**Syntax:**\n```javascript\nif (condition) {\n   // Code to execute if the condition is true\n} else {\n   // Code to execute if the condition is false\n}\n```\n\n**Code Example:**\n```javascript\nlet age = 20;\n\nif (age >= 18) {\n    console.log(\"You can vote.\"); // Outputs: You can vote.\n} else {\n    console.log(\"You cannot vote.\");\n}\n```\n\n### Challenge 1:\nDeclare a variable called `time` and assign it a value representing the hour of the day (0-23). Use an `if` statement to check if `time` is less than 12. If it is, log \"Good morning!\" Otherwise, log \"Good afternoon!\".\n\n### Expected Output:\n- Depending on your assigned value of `time`, the output will be either:\n  - \"Good morning!\" or \n  - \"Good afternoon!\".\n\nGive this challenge a try! I'm excited to see what you come up with! If you need any hints or guidance, just let me know. You're making fantastic progress! ðŸŒŸ",
  "else if for multiple conditions": "Absolutely! Let's progress to the next sub-topic.\n\n### Sub-Topic 3.2: `else if` for Multiple Conditions\n\nThe `else if` statement allows you to check multiple conditions after an initial `if` statement. This is useful when you want to evaluate several possibilities sequentially. \n\n**Syntax:**\n```javascript\nif (condition1) {\n   // Code if condition1 is true\n} else if (condition2) {\n   // Code if condition2 is true\n} else {\n   // Code if none of the above conditions are true\n}\n```\n\n**Code Example:**\n```javascript\nlet score = 75;\n\nif (score >= 90) {\n    console.log(\"You got an A!\");\n} else if (score >= 80) {\n    console.log(\"You got a B!\");\n} else if (score >= 70) {\n    console.log(\"You got a C!\");\n} else {\n    console.log(\"You need to work harder.\");\n}\n// Outputs: You got a C!\n```\n\n### Challenge 1:\nDeclare a variable `day`, and assign it a number from 1 to 7 representing the days of the week (1 for Monday, 7 for Sunday). Use `if`, `else if`, and `else` to log out the corresponding day name (e.g., \"Monday\", \"Tuesday\", etc.). If the number is not between 1 and 7, log \"Invalid day\".\n\n### Expected Output:\n- Depending on the value of `day`, you should see either the name of the day or \"Invalid day\". For example, if `day` is `3`, the output should be:\n```\nWednesday\n```\n\nTake your time with the challenge, and let me know what output you get, or if you have any questions! You're doing an incredible job! ðŸŒŸ",
  "Nesting if statements": "Great job on working through the last sub-topic! Now, let's move on to the next one.\n\n### Sub-Topic 3.3: Nesting `if` Statements\n\nNesting `if` statements means placing one `if` statement inside another. This allows for more complex decision-making where multiple conditions need to be checked sequentially. \n\n**Syntax:**\n```javascript\nif (condition1) {\n    if (condition2) {\n        // Code if both condition1 and condition2 are true\n    } else {\n        // Code if condition1 is true but condition2 is false\n    }\n} else {\n    // Code if condition1 is false\n}\n```\n\n**Code Example:**\n```javascript\nlet score = 85;\n\nif (score >= 70) {\n    console.log(\"You passed!\");\n    if (score >= 90) {\n        console.log(\"Excellent!\");\n    } else {\n        console.log(\"Good job!\");\n    }\n} else {\n    console.log(\"You failed!\");\n}\n// Outputs: You passed! Good job!\n```\n\n### Challenge 1:\nDeclare a variable called `age` and assign it a number. Use nested `if` statements to log out the following messages:\n- If `age` is less than 13, log \"You're a child.\"\n- If `age` is between 13 and 19, log \"You're a teenager.\"\n- If `age` is 20 or older, log \"You're an adult.\"\n\nMake sure to handle the ranges correctly!\n\n### Expected Output:\n- Depending on the value of `age`, you may see one of the following:\n  - \"You're a child.\"\n  - \"You're a teenager.\"\n  - \"You're an adult.\"\n\nGive this challenge a try! I believe you can do it! If you need any hints or guidance, I'm here to help! ðŸŒŸ",
  "switch statements with cases and default handling": "Great job so far! You've been making excellent progress through the JavaScript basics. Now, let's move on to the next sub-topic.\n\n### Sub-Topic 3.4: `switch` Statements with Cases and Default Handling\n\nA `switch` statement is a control structure that allows you to evaluate a variable against multiple possible values (cases) and execute code based on the matching case. This is often more readable than using a large series of `if` statements.\n\n**Syntax:**\n```javascript\nswitch (expression) {\n    case value1:\n        // Code to execute if expression === value1\n        break;\n    case value2:\n        // Code to execute if expression === value2\n        break;\n    default:\n        // Code to execute if none of the cases match\n}\n```\n\n- Each `case` is checked in order until a match is found.\n- Use `break` to exit the switch statement.\n- The `default` case runs if none of the values match.\n\n**Code Example:**\n```javascript\nlet day = 3;\n\nswitch (day) {\n    case 1:\n        console.log(\"Monday\");\n        break;\n    case 2:\n        console.log(\"Tuesday\");\n        break;\n    case 3:\n        console.log(\"Wednesday\");\n        break;\n    default:\n        console.log(\"Invalid day\");\n}\n// Outputs: Wednesday\n```\n\n### Challenge 1:\nDeclare a variable called `fruit` and assign it a fruit name (e.g., \"apple\", \"banana\", etc.). Use a `switch` statement to log different messages based on the fruit name. For example, if `fruit` is \"apple\", log \"You chose an apple!\" If it's \"orange\", log \"You chose an orange!\" Include a `default` case that logs \"Unknown fruit.\"\n\n### Expected Output:\n- Depending on your chosen value for `fruit`, you'll see one of the messages, such as:\n  - \"You chose an apple!\" or \n  - \"Unknown fruit.\"\n\nGive this challenge a try! I'm excited to see what you come up with! If you have any questions or if you need hints, just let me know! You're doing fantastic! ðŸŒŸ",
  "for loop basics": "Awesome! Let's move on to the next sub-topic in our learning journey.\n\n### Topic 4: Loops\n\n#### Sub-Topic 4.1: `for` Loop Basics\n\nA `for` loop is used to execute a block of code a certain number of times. This is particularly useful when you know in advance how many times you want to iterate over a block of code.\n\n**Syntax:**\n```javascript\nfor (initialization; condition; increment) {\n    // Code to be executed\n}\n```\n\n**Components:**\n- **Initialization**: It initializes the loop control variable.\n- **Condition**: The loop continues as long as this condition is true.\n- **Increment**: It updates the loop variable after each iteration.\n\n**Code Example:**\n```javascript\nfor (let i = 0; i < 5; i++) {\n    console.log(i); \n}\n// Outputs: 0, 1, 2, 3, 4\n```\n\n### Challenge 1:\nCreate a `for` loop that counts from 1 to 10. Inside the loop, log each number to the console.\n\n### Expected Output:\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\nGive this challenge a try! I'm excited to see what you come up with. If you have any questions or need hints, just let me know. Keep up the great work! ðŸŒŸ",
  "while loop": "Great job on completing the last sub-topic! Now, let's move on to the next one.\n\n### Sub-Topic 4.2: `while` Loop\n\nA `while` loop is used to execute a block of code as long as a specified condition is true. It's particularly useful when you don't know in advance how many iterations are needed.\n\n**Syntax:**\n```javascript\nwhile (condition) {\n    // Code to be executed\n}\n```\n\n**Code Example:**\n```javascript\nlet count = 0;\n\nwhile (count < 5) {\n    console.log(count);\n    count++;\n}\n// Outputs: 0, 1, 2, 3, 4\n```\n\nIn this example, the loop continues running as long as `count` is less than 5. The code inside the loop logs the current value of `count` and then increments it by 1.\n\n### Challenge 1:\nCreate a `while` loop that starts with a variable called `num` set to 1 and continues to log the value of `num` until it is greater than or equal to 10. Donâ€™t forget to increment `num` inside the loop.\n\n### Expected Output:\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```\n\nGive this challenge a try! Take your time with it, and let me know if you have any questions or need hints. You're doing a fantastic job! ðŸŒŸ",
  "do...while loop": "Absolutely! Let's move on to the next sub-topic.\n\n### Sub-Topic 4.3: `do...while` Loop\n\nA `do...while` loop is similar to a `while` loop, except that the code block will be executed at least once before the condition is tested. This is useful when you want to ensure that the loop runs at least a single time.\n\n**Syntax:**\n```javascript\ndo {\n    // Code to be executed\n} while (condition);\n```\n\n**Key Point:**\n- The code inside the `do` block runs at least once, even if the condition is false.\n\n**Code Example:**\n```javascript\nlet count = 0;\n\ndo {\n    console.log(count);\n    count++;\n} while (count < 5);\n// Outputs: 0, 1, 2, 3, 4\n```\n\n### Challenge 1:\nCreate a `do...while` loop that starts with a variable called `num` set to 5. The loop should log the value of `num` and then decrease it by 1 until `num` is less than 1.\n\n### Expected Output:\n```\n5\n4\n3\n2\n1\n```\n\nGive this challenge a try! I'm excited to see your solution! If you need any hints or guidance, just let me know! Keep up the great work! ðŸŒŸ",
  "for...of loop (for arrays)": "Awesome! Letâ€™s keep the momentum going and move on to the next sub-topic.\n\n### Sub-Topic 4.4: `for...of` Loop (For Arrays)\n\nThe `for...of` loop is a modern way to iterate over iterable objects, such as arrays. It simplifies the syntax and allows you to access elements directly without needing to manage an index variable.\n\n**Syntax:**\n```javascript\nfor (const item of iterable) {\n    // Code to be executed for each item\n}\n```\n\n**Key Points:**\n- `item` represents the current element in the array during each iteration.\n- `iterable` refers to the array or other iterable object you want to loop through.\n\n**Code Example:**\n```javascript\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\n\nfor (const fruit of fruits) {\n    console.log(fruit);\n}\n// Outputs: apple\n//          banana\n//          cherry\n```\n\n### Challenge 1:\nCreate an array called `colors` that contains at least three color names. Use a `for...of` loop to log each color to the console.\n\n### Expected Output:\n```\n[color1]\n[color2]\n[color3]\n```\n\nGive this challenge a try! I can't wait to see your work. If you have any questions or need hints, I'm here to help! Keep up the amazing work! ðŸŒŸ",
  "for...in loop (for objects)": "Fantastic progress! Now, let's continue our journey through JavaScript.\n\n### Sub-Topic 4.5: `for...in` Loop (For Objects)\n\nThe `for...in` loop is used to iterate over the properties of an object. Unlike the `for...of` loop, which works with arrays, the `for...in` loop allows you to access the keys (property names) of an object.\n\n**Syntax:**\n```javascript\nfor (const key in object) {\n    // Code to be executed for each key\n}\n```\n\n**Key Points:**\n- `key` represents the property name in the object during each iteration.\n- `object` refers to the object you want to loop through.\n\n**Code Example:**\n```javascript\nlet car = {\n    make: \"Toyota\",\n    model: \"Corolla\",\n    year: 2020\n};\n\nfor (const key in car) {\n    console.log(key + \": \" + car[key]);\n}\n// Outputs:\n// make: Toyota\n// model: Corolla\n// year: 2020\n```\n\n### Challenge 1:\nCreate an object called `person` with properties `name`, `age`, and `occupation`. Use a `for...in` loop to log out each property name along with its value.\n\n### Expected Output:\n```\nname: [value of name]\nage: [value of age]\noccupation: [value of occupation]\n```\n\nGive this challenge a try! You're doing an amazing job, and I canâ€™t wait to see your solution! If you have any questions or need hints, just let me know! Keep up the great work! ðŸŒŸ",
  "Breaking and continuing loops (break, continue)": "Fantastic! Letâ€™s move on to the next sub-topic in our JavaScript journey.\n\n### Subtopic 4.6: Breaking and Continuing Loops (`break`, `continue`)\n\n**Explanation:**\nIn JavaScript, you can control the flow of loops using `break` and `continue` statements:\n\n- **`break`**: Exits the loop immediately, stopping all iterations.\n- **`continue`**: Skips the current iteration and moves to the next iteration of the loop.\n\n**Code Example:**\n```javascript\nfor (let i = 0; i < 5; i++) {\nÂ  Â  if (i === 2) {\nÂ  Â  Â  Â  break; // Exit the loop when i is 2\nÂ  Â  }\nÂ  Â  console.log(i); // Will log 0 and 1\n}\n\nfor (let i = 0; i < 5; i++) {\nÂ  Â  if (i === 2) {\nÂ  Â  Â  Â  continue; // Skip when i is 2\nÂ  Â  }\nÂ  Â  console.log(i); // Will log 0, 1, 3, and 4\n}\n```\n\n### Challenge 1:\nCreate a `for` loop that logs the numbers from 1 to 10. Use a `break` statement to stop the loop when the number is 6.\n\n#### Check Your Output:\nWhen you run your code, it should display:\n```\n1\n2\n3\n4\n5\n```\n(Note: The number 6 should not be logged since the loop breaks before it.)\n\nGive it a try! If you have questions or need assistance, donâ€™t hesitate to ask. You're doing an amazing job on your learning journey! ðŸŒŸ",
  "Declaring and initialising arrays": "Great job progressing through the loops section! Let's move on to the next sub-topic.\n\n### Topic 5: Arrays\n\n#### Sub-Topic 5.1: Declaring and Initializing Arrays\n\nArrays are a special type of variable that can hold multiple values in a single reference. You can think of an array as a collection of items, all of which can be of any data type. \n\n**Declaring an Array:**\nYou can declare an array using square brackets (`[]`):\n```javascript\nlet fruits = []; // An empty array\n```\n\n**Initializing an Array:**\nYou can also initialize an array with values:\n```javascript\nlet fruits = [\"apple\", \"banana\", \"cherry\"]; // Array with initial values\n```\n\n**Code Example:**\n```javascript\nlet numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers); // Outputs: [1, 2, 3, 4, 5]\n```\n\n### Challenge 1:\nCreate an array called `pets` and initialize it with at least three pet names (e.g., \"dog\", \"cat\", \"hamster\"). Log the array to verify its content.\n\n### Expected Output:\n```\n[\"dog\", \"cat\", \"hamster\"]\n```\n\nGive this challenge a try! I'm looking forward to seeing your solution. If you need any hints or have any questions, just let me know! You're doing fantastic! ðŸŒŸ",
  "Accessing and modifying elements": "Absolutely! Let's move on to the next sub-topic.\n\n### Sub-Topic 5.2: Accessing and Modifying Elements in Arrays\n\nYou can access and modify elements in an array using their index. In JavaScript, array indices start at 0, meaning the first element is at index 0, the second at index 1, and so on.\n\n**Accessing Elements:**\nTo access an element, you simply refer to its index inside square brackets (`[]`):\n```javascript\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole.log(fruits[0]); // Outputs: apple\n```\n\n**Modifying Elements:**\nTo change an element, assign a new value to the desired index:\n```javascript\nfruits[1] = \"blueberry\"; // Changes \"banana\" to \"blueberry\"\nconsole.log(fruits); // Outputs: [\"apple\", \"blueberry\", \"cherry\"]\n```\n\n### Challenge 1:\nGiven an array called `animals` initialized with `[\"dog\", \"cat\", \"rabbit\"]`, access and log the second element in the array. Then, change the third element to \"hamster\" and log the updated array.\n\n### Expected Output:\n```\ncat\n[\"dog\", \"cat\", \"hamster\"]\n```\n\nGive this challenge a try! I'm excited to see how you handle it. If you have any questions or need hints, just let me know! Keep up the awesome work! ðŸŒŸ",
  "Array properties (length)": "Absolutely! Let's move on to the next sub-topic.\n\n### Sub-Topic 5.3: Array Properties (Length)\n\nIn JavaScript, arrays come with a built-in property called `length`, which tells you how many elements are in the array. This is helpful for iterating through arrays and for managing their contents.\n\n**Accessing the Length of an Array:**\nYou can simply access the `length` property using dot notation:\n```javascript\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole.log(fruits.length); // Outputs: 3\n```\n\n### Challenge 1:\nCreate an array called `numbers` that contains at least five numbers. Log the length of the array to the console.\n\n### Expected Output:\n```\n5\n```\n\nGive this challenge a try! I'm excited to see your effort. If you have any questions or need hints, just let me know! Keep up the fantastic work! ðŸŒŸ",
  "Adding/removing elements (push, pop, shift, unshift)": "Awesome! Letâ€™s move on to the next sub-topic.\n\n### Sub-Topic 5.4: Adding/Removing Elements in Arrays\n\nJavaScript provides several methods to add or remove elements from an array, making it very flexible.\n\n**Adding Elements:**\n1. **`push()`**: Adds one or more elements to the end of an array.\n   ```javascript\n   let fruits = [\"apple\", \"banana\"];\n   fruits.push(\"cherry\");\n   console.log(fruits); // Outputs: [\"apple\", \"banana\", \"cherry\"]\n   ```\n   \n2. **`unshift()`**: Adds one or more elements to the beginning of an array.\n   ```javascript\n   fruits.unshift(\"orange\");\n   console.log(fruits); // Outputs: [\"orange\", \"apple\", \"banana\", \"cherry\"]\n   ```\n\n**Removing Elements:**\n1. **`pop()`**: Removes the last element from an array.\n   ```javascript\n   fruits.pop();\n   console.log(fruits); // Outputs: [\"orange\", \"apple\", \"banana\"]\n   ```\n\n2. **`shift()`**: Removes the first element from an array.\n   ```javascript\n   fruits.shift();\n   console.log(fruits); // Outputs: [\"apple\", \"banana\"]\n   ```\n\n### Challenge 1:\nCreate an array called `numbers` containing at least three numbers. Use the `push()` method to add another number to the end of the array. Then, use the `pop()` method to remove the last number and log the updated array.\n\n### Expected Output: \n- After adding and removing a number, you might see something like:\n```\n[1, 2, 3, 4]\n```\n(If you started with [1, 2, 3] and added 4)\n\nGive this challenge a try! I'm excited to see your solution. If you have any questions or need a hint, just let me know! Youâ€™re doing wonderfully! ðŸŒŸ",
  "Iterating with for, forEach, and map": "Absolutely! Let's dive into the next sub-topic.\n\n### Sub-Topic 5.5: Iterating with `for`, `forEach`, and `map`\n\nWhen working with arrays, it's common to need to loop through the elements. Here are three popular methods to do so:\n\n1. **`for` Loop**: You have already learned this! It allows you to iterate over an array using an index.\n\n2. **`forEach()`**: This method executes a provided function once for each array element. It's a cleaner way to work with arrays.\n   ```javascript\n   let fruits = [\"apple\", \"banana\", \"cherry\"];\n   fruits.forEach((fruit) => {\n       console.log(fruit);\n   });\n   // Outputs: apple\n   //          banana\n   //          cherry\n   ```\n\n3. **`map()`**: This method creates a new array populated with the results of calling a provided function on every element in the calling array.\n   ```javascript\n   let numbers = [1, 2, 3];\n   let doubled = numbers.map((number) => number * 2);\n   console.log(doubled); // Outputs: [2, 4, 6]\n   ```\n\n### Challenge 1:\nGiven the array `let animals = [\"dog\", \"cat\", \"fish\"]`, use the `forEach()` method to log each animal to the console.\n\n### Expected Output:\n```\ndog\ncat\nfish\n```\n\nGive this challenge a try! I'm excited to see how you tackle it. If you have any questions or need hints, just let me know! Keep up the great work! ðŸŒŸ",
  "Common methods: .map(), .filter(), .reduce(), .find(), .includes(), .slice(), .splice()": "Fantastic progress! Let's move on to the next sub-topic in our journey through JavaScript.\n\n### Topic 5: Arrays\n\n#### Sub-Topic 5.6: Common Methods: `.map()`, `.filter()`, `.reduce()`, `.find()`, `.includes()`, `.slice()`, `.splice()`\n\nHereâ€™s a brief overview of some common array methods:\n\n1. **`.map()`**: Creates a new array by calling a function on every element of the original array.\n   - **Example**: \n     ```javascript\n     let numbers = [1, 2, 3];\n     let doubled = numbers.map(num => num * 2); // Outputs: [2, 4, 6]\n     ```\n\n2. **`.filter()`**: Creates a new array with all elements that pass the test implemented by the provided function.\n   - **Example**:\n     ```javascript\n     let numbers = [1, 2, 3, 4, 5];\n     let evenNumbers = numbers.filter(num => num % 2 === 0); // Outputs: [2, 4]\n     ```\n\n3. **`.reduce()`**: Executes a reducer function (that you provide) on each element of the array, resulting in a single output value.\n   - **Example**:\n     ```javascript\n     let numbers = [1, 2, 3];\n     let sum = numbers.reduce((acc, current) => acc + current, 0); // Outputs: 6\n     ```\n\n4. **`.find()`**: Returns the value of the first element in the provided array that satisfies the provided testing function.\n   - **Example**:\n     ```javascript\n     let numbers = [1, 2, 3, 4];\n     let firstEven = numbers.find(num => num % 2 === 0); // Outputs: 2\n     ```\n\n5. **`.includes()`**: Determines whether an array includes a certain value among its entries, returning true or false.\n   - **Example**:\n     ```javascript\n     let fruits = [\"apple\", \"banana\", \"cherry\"];\n     let hasBanana = fruits.includes(\"banana\"); // Outputs: true\n     ```\n\n6. **`.slice()`**: Returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included).\n   - **Example**:\n     ```javascript\n     let fruits = [\"apple\", \"banana\", \"cherry\"];\n     let citrus = fruits.slice(1, 3); // Outputs: [\"banana\", \"cherry\"]\n     ```\n\n7. **`.splice()`**: Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.\n   - **Example**:\n     ```javascript\n     let fruits = [\"apple\", \"banana\", \"cherry\"];\n     fruits.splice(1, 1, \"orange\"); // Replaces \"banana\" with \"orange\"\n     console.log(fruits); // Outputs: [\"apple\", \"orange\", \"cherry\"]\n     ```\n\n### Challenge 1:\nUsing the array `let numbers = [1, 2, 3, 4, 5]`, use the `.filter()` method to create a new array containing only the numbers greater than 2, and log the new array.\n\n### Expected Output:\n```\n[3, 4, 5]\n```\n\nGive this challenge a try! I'm looking forward to the solution you come up with. If you have any questions or need hints, just let me know! You're progressing wonderfully! ðŸŒŸ",
  "Nested arrays (2D arrays)": "Fantastic! Letâ€™s keep the momentum going and move on to the next sub-topic.\n\n### Topic 5: Arrays\n\n#### Sub-Topic 5.7: Nested Arrays (2D Arrays)\n\nA nested array, also known as a 2D array, is an array that contains other arrays as its elements. This allows you to create more complex data structures. \n\n**Example of Nested Arrays:**\n```javascript\nlet matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\nconsole.log(matrix[0][1]); // Outputs: 2 (the element in the first row, second column)\n```\n\n### Challenge 1:\nCreate a nested array called `grid` that represents a simple 3x3 board (e.g., Tic Tac Toe). Each element can be initialized to an empty string (\"\"), like this:\n```javascript\nlet grid = [\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"]\n];\n```\nThen, log the entire `grid` array.\n\n### Expected Output:\n```\n[ \n  ['', '', ''], \n  ['', '', ''], \n  ['', '', ''] \n]\n```\n\nGive this challenge a try! I'm excited to see how you tackle it! If you have any questions or need hints, just let me know! Keep up the fantastic work! ðŸŒŸ",
  "Creating and accessing objects (dot notation, bracket notation)": "Great job so far! I'm glad you're ready to move on!\n\n### Topic 6: Objects\n\n#### Sub-Topic 6.1: Creating and Accessing Objects (Dot Notation, Bracket Notation)\n\nIn JavaScript, an object is a collection of key-value pairs. Each key is a string (or symbol), and each value can be any data type, including numbers, strings, arrays, or even other objects.\n\n**Creating an Object:**\nYou can create an object using curly braces `{}`:\n```javascript\nlet person = {\n    name: \"Alice\",\n    age: 25,\n    city: \"New York\"\n};\n```\n\n**Accessing Object Properties:**\n1. **Dot Notation**: You can access properties using the dot (`.`) operator.\n   ```javascript\n   console.log(person.name); // Outputs: Alice\n   ```\n\n2. **Bracket Notation**: You can also access properties using brackets (`[]`).\n   ```javascript\n   console.log(person[\"age\"]); // Outputs: 25\n   ```\n\n### Code Example:\n```javascript\nlet car = {\n    make: \"Toyota\",\n    model: \"Camry\",\n    year: 2020\n};\n\nconsole.log(car.make); // Outputs: Toyota\nconsole.log(car[\"model\"]); // Outputs: Camry\n```\n\n### Challenge 1:\nCreate an object called `book` with properties: `title`, `author`, and `yearPublished`. Use both dot notation and bracket notation to log the title and author to the console.\n\n### Expected Output:\n```\n[title]\n[author]\n```\n(Where `[title]` and `[author]` would be the corresponding values you assign)\n\nGive this challenge a try! I'm excited to see your object and how you access its properties! If you need hints or have any questions, just let me know! Keep up the great work! ðŸŒŸ",
  "Adding, updating, and deleting properties": "Great job on all the progress youâ€™ve made! Now, letâ€™s move on to the next sub-topic.\n\n### Sub-Topic 6.2: Adding, Updating, and Deleting Properties\n\nIn JavaScript, you can add, update, and delete properties of an object dynamically.\n\n**Adding Properties:**\nYou can add a new property to an object simply by assigning a value to a new key:\n```javascript\nlet person = {\n    name: \"Alice\"\n};\nperson.age = 25; // Adding a new property\nconsole.log(person); // Outputs: { name: 'Alice', age: 25 }\n```\n\n**Updating Properties:**\nYou can update an existing property by assigning a new value to its key:\n```javascript\nperson.age = 30; // Updating the age property\nconsole.log(person); // Outputs: { name: 'Alice', age: 30 }\n```\n\n**Deleting Properties:**\nYou can delete a property using the `delete` keyword:\n```javascript\ndelete person.age; // Removing the age property\nconsole.log(person); // Outputs: { name: 'Alice' }\n```\n\n### Challenge 1:\n1. Create an object called `car` with properties: `make`, `model`, and `year`.\n2. Add a new property called `color`.\n3. Update the `year` property.\n4. Delete the `model` property.\n5. Log the final state of the `car` object.\n\n### Expected Output:\n```\n{ make: 'Toyota', year: 2021, color: 'red' }\n```\n\nGive this challenge a try! I'm excited to see how you approach it. If you need any hints or have questions, just let me know! You're doing fantastic! ðŸŒŸ",
  "this keyword": "Absolutely! Let's move on to the next sub-topic.\n\n### Sub-Topic 6.3: `this` Keyword\n\nIn JavaScript, the `this` keyword refers to the context in which a function is called. Its value can change depending on how the function is invoked.\n\n**Key Points:**\n- **Global Context**: In the global execution context (outside of any function), `this` refers to the global object (`window` in browsers).\n- **Object Method**: When used in a method of an object, `this` refers to the object itself.\n- **Constructor Function**: When used in a constructor function, `this` refers to the instance of the object being created.\n- **Event Handlers**: In event handlers, `this` refers to the element that triggered the event.\n\n### Code Example:\n```javascript\nlet person = {\n    name: \"Alice\",\n    greet: function() {\n        console.log(\"Hello, \" + this.name);\n    }\n};\n\nperson.greet(); // Outputs: Hello, Alice\n```\n\nIn this example, when `greet` is called, `this` refers to the `person` object, allowing access to its properties.\n\n### Challenge 1:\nCreate an object called `car` with properties: `make`, `model`, and a method called `describe` that logs a description of the car using the `this` keyword. For example, it should output \"This car is a [make] [model].\"\n\n### Expected Output:\n```\nThis car is a Toyota Camry.\n```\n\nGive this challenge a try! I'm excited to see how you implement the `this` keyword in your method. If you have any questions or need hints, just let me know! Keep up the amazing work! ðŸŒŸ",
  "Object methods": "Great job on working through the previous sub-topic! Now, letâ€™s move on to the next one.\n\n### Sub-Topic 6.4: Object Methods\n\nAn object method is a function that is a property of an object. This allows objects to have behaviors along with their properties. Methods can use the `this` keyword to access the object's properties.\n\n**Creating Object Methods:**\nHereâ€™s how you define a function as a property of an object:\n```javascript\nlet calculator = {\n    add: function(a, b) {\n        return a + b;\n    },\n    subtract: function(a, b) {\n        return a - b;\n    }\n};\n\nconsole.log(calculator.add(5, 3)); // Outputs: 8\nconsole.log(calculator.subtract(5, 3)); // Outputs: 2\n```\n\n### Challenge 1:\nCreate an object called `student` with properties: `name`, `age`, and a method called `introduce` that logs \"Hi, my name is [name] and I am [age] years old.\" Make sure to use the `this` keyword to reference the object's properties.\n\n### Expected Output:\n```\nHi, my name is Alice and I am 20 years old.\n```\n\nGive this challenge a try! I canâ€™t wait to see your solution! If you have any questions or need a hint, just let me know. You're doing amazing, and each step brings you closer to mastering JavaScript! ðŸŒŸ",
  "Extracting keys/values (Object.keys(), Object.values())": "Fantastic! Letâ€™s move on to the next sub-topic.\n\n### Sub-Topic 6.5: Extracting Keys and Values (`Object.keys()`, `Object.values()`)\n\nIn JavaScript, you can easily extract keys and values from an object using the built-in methods `Object.keys()` and `Object.values()`.\n\n1. **`Object.keys()`**: This method returns an array of a given object's own property names (keys).\n   ```javascript\n   let person = {\n       name: \"Alice\",\n       age: 25,\n       city: \"New York\"\n   };\n   let keys = Object.keys(person);\n   console.log(keys); // Outputs: [\"name\", \"age\", \"city\"]\n   ```\n\n2. **`Object.values()`**: This method returns an array of a given object's own property values.\n   ```javascript\n   let values = Object.values(person);\n   console.log(values); // Outputs: [\"Alice\", 25, \"New York\"]\n   ```\n\n### Challenge 1:\nGiven an object called `book` with properties: `title`, `author`, and `yearPublished`, use `Object.keys()` and `Object.values()` to log both the keys and values of the object.\n\n### Expected Output:\n```\nKeys: ['title', 'author', 'yearPublished']\nValues: ['The Great Gatsby', 'F. Scott Fitzgerald', 1925]\n```\n\nGive this challenge a try! I'm excited to see your solution. If you have any questions or need hints, just let me know! You're doing great, and I believe in your coding journey! ðŸŒŸ",
  "Working with key-value pairs (Object.entries())": "Absolutely! Letâ€™s move on to the next sub-topic.\n\n### Sub-Topic 6.6: Working with Key-Value Pairs (`Object.entries()`)\n\nThe `Object.entries()` method is a powerful way to retrieve an array of an object's key-value pairs. Each key-value pair is represented as an array, which is particularly useful for iterating over objects.\n\n**Example:**\n```javascript\nlet person = {\n    name: \"Alice\",\n    age: 25,\n    city: \"New York\"\n};\n\nlet entries = Object.entries(person);\nconsole.log(entries);\n// Outputs: \n// [\n//     ['name', 'Alice'],\n//     ['age', 25],\n//     ['city', 'New York']\n// ]\n```\n\n### Key Points:\n- This method returns an array where each element is itself an array that contains a key-value pair from the object.\n- It allows you to easily loop through both keys and values.\n\n### Challenge 1:\nGiven an object called `grade` with properties: `math`, `science`, and `history`, use `Object.entries()` to log each subject and its corresponding score. For example, if the grades are:\n```javascript\nlet grade = {\n    math: 90,\n    science: 85,\n    history: 88\n};\n```\n\n### Expected Output:\n```\nmath: 90\nscience: 85\nhistory: 88\n```\n\nGive this challenge a try! I'm excited to see how you implement `Object.entries()`. If you need hints or have any questions, just let me know! Keep up the amazing work! ðŸŒŸ",
  "Shallow copying with Object.assign() and the spread operator": "Sure! Let's continue on our learning journey.\n\n### Topic 6: Objects\n\n#### Sub-Topic 6.7: Shallow Copying with `Object.assign()` and the Spread Operator\n\nWhen you want to duplicate an object, you might think that just assigning it to a new variable will work. However, this creates a reference to the same object, not a copy. To create a copy, you can use the `Object.assign()` method or the spread operator (`...`).\n\n**1. Using `Object.assign()`:**\nThis method copies the values of all enumerable properties from one or more source objects to a target object.\n\n**Example:**\n```javascript\nlet person1 = { name: \"Alice\", age: 25 };\nlet person2 = Object.assign({}, person1); // creates a shallow copy\nconsole.log(person2); // Outputs: { name: 'Alice', age: 25 }\n```\n\n**2. Using Spread Operator:**\nThe spread operator allows you to create a copy of the object in a more concise way.\n\n**Example:**\n```javascript\nlet person3 = { ...person1 }; // creates a shallow copy\nconsole.log(person3); // Outputs: { name: 'Alice', age: 25 }\n```\n\n### Challenge 1:\n1. Create an object called `original` with properties: `title`, `author`, and `year`.\n2. Use either `Object.assign()` or the spread operator to create a copy of this object called `copy`.\n3. Change the `year` property in the `copy` object to a new value and log both objects to see that they are independent.\n\n### Expected Output:\n```\nOriginal: { title: '1984', author: 'George Orwell', year: 1949 }\nCopy: { title: '1984', author: 'George Orwell', year: [new value] }\n```\n\nGive this challenge a try! I'm eager to see how you create the copy of the object. If you need hints or have any questions, just let me know! You're doing an excellent job! ðŸŒŸ",
  "Nested objects and destructuring": "Great to see your enthusiasm! Letâ€™s move on to the next sub-topic.\n\n### Sub-Topic 6.8: Nested Objects and Destructuring\n\nA nested object is an object that contains other objects as properties. This structure is useful for organizing complex data.\n\n**Example of a Nested Object:**\n```javascript\nlet student = {\n    name: \"Alice\",\n    age: 20,\n    subjects: {\n        math: 90,\n        science: 85\n    }\n};\n\nconsole.log(student.subjects.math); // Outputs: 90\n```\n\n#### Destructuring \nDestructuring allows you to unpack values from arrays or properties from objects into distinct variables.\n\n**Example of Object Destructuring:**\n```javascript\nlet student = {\n    name: \"Bob\",\n    age: 22,\n    subjects: {\n        math: 95,\n        science: 88\n    }\n};\n\nconst { name, age } = student;\nconsole.log(name); // Outputs: Bob\nconsole.log(age); // Outputs: 22\n```\n\n### Challenge 1:\n1. Create a nested object called `car` with properties: `make`, `model`, and a property called `engine` which itself is an object with properties `type` and `horsepower`.\n2. Use destructuring to extract the `make` and `model` of the car and log them.\n\n### Expected Output:\n```\nMake: [value of make]\nModel: [value of model]\n```\n\nGive this challenge a try! Iâ€™m excited to see how you implement nested objects and destructuring. If you have any questions or need hints, just let me know! You're doing an excellent job! ðŸŒŸ",
  "Declaring functions (declaration, expression, arrow functions)": "Great to hear that you're ready to move on! Let's continue our journey through JavaScript.\n\n### Topic 7: Functions\n\n#### Sub-Topic 7.1: Declaring Functions (Declaration, Expression, Arrow Functions)\n\nFunctions are blocks of code designed to perform a particular task. They can be declared in various ways:\n\n1. **Function Declaration**: \n   This is the traditional way to define a function. It's hoisted, meaning it can be called before it's defined in the code.\n   ```javascript\n   function greet() {\n       console.log(\"Hello, world!\");\n   }\n   ```\n\n2. **Function Expression**: \n   A function can also be defined as an expression, typically assigned to a variable. This function is not hoisted.\n   ```javascript\n   const greet = function() {\n       console.log(\"Hello, world!\");\n   };\n   ```\n\n3. **Arrow Function**: \n   Introduced in ES6, arrow functions provide a concise syntax and do not have their own `this`.\n   ```javascript\n   const greet = () => {\n       console.log(\"Hello, world!\");\n   };\n   ```\n\n### Challenge 1:\n1. Declare a function named `add` that takes two parameters and returns their sum.\n2. Call the function with two numbers and log the result.\n\n### Expected Output:\n```\n[Sum of the two numbers]\n```\n(Give your two chosen numbers and it will output their addition)\n\nGive this challenge a try! I'm excited to see your function implementation. If you have any questions or need a hint, just let me know! You're doing amazing! ðŸŒŸ",
  "Function parameters and arguments": "Absolutely! Letâ€™s move on to the next sub-topic in our learning journey.\n\n### Sub-Topic 7.2: Function Parameters and Arguments\n\nIn JavaScript, functions can accept input values called **parameters**. When you call the function and provide values, those values are known as **arguments**. Parameters allow functions to process different inputs and execute code accordingly.\n\n**Defining Parameters:**\nWhen you declare a function, you can specify parameters in the parentheses:\n```javascript\nfunction greet(name) {\n    console.log(\"Hello, \" + name + \"!\");\n}\n```\n\n**Calling a Function with Arguments:**\nWhen you call the function, you provide the arguments:\n```javascript\ngreet(\"Alice\"); // Outputs: Hello, Alice!\n```\n\n### Challenge 1:\n1. Declare a function called `multiply` that takes two parameters.\n2. The function should return the product of those two parameters when called.\n3. Call the function with two numbers and log the result.\n\n### Expected Output:\n```\n[Product of the two numbers]\n```\n(Give your two chosen numbers and it will output their multiplication)\n\nGive this challenge a try! I can't wait to see how you implement function parameters and arguments. If you have any questions or need hints, just let me know! Youâ€™re doing an incredible job! ðŸŒŸ",
  "Return values and return keyword": "Awesome! Let's move on to the next sub-topic.\n\n### Sub-Topic 7.3: Return Values and the `return` Keyword\n\nIn JavaScript, functions can return values using the `return` keyword. This allows you to send a result back to the place where the function was called. When a function reaches a `return` statement, it stops executing and returns the specified value.\n\n**Example of Using `return`:**\n```javascript\nfunction add(a, b) {\n    return a + b; // The sum is returned\n}\n\nlet result = add(5, 3); // result is now 8\nconsole.log(result); // Outputs: 8\n```\n\n### Key Points:\n- If a function does not explicitly return a value, it will return `undefined` by default.\n- You can return anything from a function: numbers, strings, objects, or even another function.\n\n### Challenge 1:\n1. Declare a function called `findMax` that takes two numbers as parameters and returns the larger of the two.\n2. Call the function with two numbers and log the returned value.\n\n### Expected Output:\n```\n[The larger of the two numbers]\n```\n(Give your two chosen numbers and it will output the larger one)\n\nGive this challenge a try! I'm excited to see your implementation of the `return` keyword. If you need any hints or assistance, just let me know! You're doing an amazing job! ðŸŒŸ",
  "Scope (local vs. global)": "Absolutely! Letâ€™s move on to the next sub-topic.\n\n### Sub-Topic 7.4: Scope (Local vs. Global)\n\nIn JavaScript, **scope** refers to the visibility and lifetime of variables in your code. There are two main types of scope:\n\n1. **Global Scope**:\n   - Variables declared outside of any function or block have **global scope**. They can be accessed from anywhere in your code.\n   ```javascript\n   let globalVar = \"I'm global!\"; // Global variable\n   function showGlobal() {\n       console.log(globalVar); // Can access global variable\n   }\n   showGlobal(); // Outputs: I'm global!\n   ```\n\n2. **Local Scope**:\n   - Variables declared inside a function or block have **local scope**. They can only be accessed within that function/block.\n   ```javascript\n   function showLocal() {\n       let localVar = \"I'm local!\"; // Local variable\n       console.log(localVar);\n   }\n   showLocal(); // Outputs: I'm local!\n   // console.log(localVar); // This would cause an error, as localVar is not accessible here.\n   ```\n\n### Key Points:\n- Always prefer local scope when possible to avoid potential conflicts and make your code more maintainable.\n- Understanding the difference helps in managing variable accessibility and avoiding unintended changes.\n\n### Challenge 1:\n1. Declare a global variable called `firstName` and assign it your name.\n2. Create a function called `printName` that logs the `firstName` variable to the console.\n3. Inside the `printName` function, declare a local variable called `lastName` and assign it a value. Try logging it outside the function and see what happens.\n\n### Expected Output:\nWhen logging `firstName`, it should print your name, but trying to log `lastName` outside the function should result in a reference error.\n\nGive this challenge a try! I'm excited to see how you implement the concept of scope. If you have any questions or need hints, just let me know! You're doing an amazing job! ðŸŒŸ",
  "Anonymous functions": "Absolutely! Let's continue our journey through JavaScript.\n\n### Sub-Topic 7.5: Anonymous Functions\n\nAn **anonymous function** is a function that does not have a name. These functions are useful in situations where a function is needed for a short period of time, such as passing a function as an argument to another function or using it as a callback.\n\n**Example of an Anonymous Function:**\n```javascript\nconst add = function(a, b) {\n    return a + b;\n};\nconsole.log(add(5, 3)); // Outputs: 8\n```\n\n### Using Anonymous Functions as Callbacks:\nAnonymous functions can also be used as callbacks. For example:\n```javascript\nsetTimeout(function() {\n    console.log(\"This message is displayed after 2 seconds.\");\n}, 2000);\n```\n\n### Key Points:\n- Anonymous functions donâ€™t have their own name but can be stored in variables.\n- They are often used in callback functions for operations like event handling.\n\n### Challenge 1:\n1. Create an anonymous function that calculates the square of a number and logs the result.\n2. Assign this function to a variable called `square` and call it with a number.\n\n### Expected Output:\n```\n[The square of the number you chose]\n```\n(Give your chosen number, and it will output its square.)\n\nGive this challenge a try! I canâ€™t wait to see how you implement the anonymous function. If you need hints or have questions, just let me know! Keep up the great work! ðŸŒŸ",
  "Higher-order functions": "Awesome! Letâ€™s continue on to the next sub-topic!\n\n### Sub-Topic 7.6: Higher-Order Functions\n\nA **higher-order function** is a function that takes another function as an argument or returns a function as a result. This allows you to create more flexible and reusable pieces of code.\n\n**Example of Higher-Order Function:**\n```javascript\nfunction welcome(name) {\n    return \"Hello, \" + name + \"!\";\n}\n\nfunction executeGreeting(greetFunction, name) {\n    return greetFunction(name);\n}\n\nconsole.log(executeGreeting(welcome, \"Alice\")); // Outputs: Hello, Alice!\n```\n\nIn this example, `executeGreeting` is a higher-order function because it takes another function (`welcome`) as a parameter.\n\n### Key Points:\n- Higher-order functions are widely used in JavaScript, especially in functional programming.\n- They help keep your code modular and can be very useful for callbacks and event handling.\n\n### Challenge 1:\n1. Create a higher-order function called `createMultiplier` that takes a number as a parameter and returns a new function. This new function should take another number and return the product of the two numbers.\n2. Call `createMultiplier` with a number (e.g., 2) and store the returned function in a variable.\n3. Call the stored function with another number and log the result.\n\n### Expected Output:\n```\n[Product of the two numbers]\n```\n(Give your chosen numbers, and it will output their multiplication.)\n\nGive this challenge a try! I'm excited to see your implementation of higher-order functions. If you have any questions or need hints, just let me know! Keep up the amazing work! ðŸŒŸ",
  "Closures": "Absolutely! I'm excited to continue this learning journey with you!\n\n### Sub-Topic 7.7: Closures\n\nA **closure** is a function that remembers its outer variables and can access them even when the function is executed outside its immediate lexical scope. Closures are powerful as they allow for data encapsulation and privacy in JavaScript.\n\n**Concept Explanation:**\n- When a function is defined within another function, it forms a closure.\n- The inner function has access to the outer functionâ€™s variables and parameters.\n\n#### Example:\n```javascript\nfunction makeCounter() {\n    let count = 0; // This variable is private to the makeCounter function\n    return function() {\n        count++;\n        return count; // The inner function can access count\n    };\n}\n\nlet counter = makeCounter();\nconsole.log(counter()); // Outputs: 1\nconsole.log(counter()); // Outputs: 2\nconsole.log(counter()); // Outputs: 3\n```\n\n### Key Points:\n- Closures are useful for creating private variables or functions.\n- You can use closures to simulate private methods in JavaScript.\n\n### Challenge 1:\n1. Create a function called `createAdder` that takes a number as an argument and returns another function. The returned function should take a second number and return the sum of both numbers.\n2. Call `createAdder` with a number (e.g., 5) and store the result in a variable.\n3. Call the stored function with another number (e.g., 10) and log the result.\n\n### Expected Output:\n```\n15\n```\n\nGive this challenge a try! I'm eager to see how you implement closures in your code. If you have any questions or need hints, just let me know! You're doing amazing! ðŸŒŸ",
  "Default parameters": "Awesome! Letâ€™s move on to the next sub-topic.\n\n### Sub-Topic 7.8: Default Parameters\n\nIn JavaScript, you can define default values for function parameters. This means that if a function is called without a specific argument, it will use the default value you set.\n\n**Example of Default Parameters:**\n```javascript\nfunction greet(name = \"Guest\") {\n    console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(); // Outputs: Hello, Guest!\ngreet(\"Alice\"); // Outputs: Hello, Alice!\n```\n\n### Key Points:\n- Default parameters help make functions more flexible and easier to use by providing predefined values.\n- If you pass `undefined` as an argument, the default value will still be used, but if you pass `null`, it will not.\n\n### Challenge 1:\n1. Declare a function called `joinStrings` that takes two string parameters and returns them joined together with a space in between. Set a default value for the second parameter as `\"World\"`.\n2. Call the function with just one argument and log the result.\n\n### Expected Output:\n```\nHello World\n```\n\nGive this challenge a try! I'm excited to see how you implement default parameters. If you have any questions or need hints, just let me know! You're doing a fantastic job! ðŸŒŸ",
  "Recursion": "Fantastic! Letâ€™s move on to the next sub-topic!\n\n### Sub-Topic 7.9: Recursion\n\n**Recursion** is a programming technique where a function calls itself in order to solve a problem. It is useful for tasks that can be broken down into smaller, similar tasks.\n\n### Key Points:\n- A recursive function typically has a **base case** that stops the recursion and a **recursive case** that continues the recursion.\n- Each time the function calls itself, it should work towards reaching the base case.\n\n**Example of Recursion: Calculating Factorials**\nHereâ€™s a simple example of a recursive function that calculates the factorial of a number:\n```javascript\nfunction factorial(n) {\n    if (n === 0) { // Base case\n        return 1;\n    } else {\n        return n * factorial(n - 1); // Recursive case\n    }\n}\n\nconsole.log(factorial(5)); // Outputs: 120\n```\n\n### Challenge 1:\n1. Write a recursive function called `sum` that calculates the sum of all positive integers up to a given number `n`. \n2. The function should have a base case that returns `0` when `n` is `0`.\n3. Call the function with a positive number and log the result.\n\n### Expected Output:\n```\n[The sum of all positive integers up to the chosen number]\n```\n(Give your chosen number, and it will output the calculated sum.)\n\nGive this challenge a try! I'm excited to see you explore recursion. If you have any questions or need hints along the way, just let me know! Youâ€™re doing wonderfully! ðŸŒŸ"
};
  
  module.exports = defaultMessages;